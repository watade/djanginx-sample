upstream app_server {
    # gunicornのUnixドメインソケットを通す
    # fail_timeout=0により, 正常なレスポンスが帰ってくるまでリトライし続ける
    server unix:/var/run/gunicorn/gunicorn.sock fail_timeout=0;
}

# server {
#     # 一致するホスト名がない場合, コネクションを閉じる
#     listen 80 default_server;
#     return 444;
# }

server {
    # TCP_DEFER_ACCEPTオプションを使い, TCP接続が確立されるまでの待ち時間を短くする
    listen 80 deferred;
    # サーバーが受け取るクライアントからのデータの最大サイズを4GBに設定
    client_max_body_size 4G;

    server_name _;

    # 静的コンテンツの存在するディレクトリ
    root /usr/share/;

    location / {
        # uriのパスに対する静的コンテンツが存在しない場合, @proxy_to_appに内部リダイレクト
        try_files $uri @proxy_to_app;
    }

    # 名前付きロケーション
    location @proxy_to_app {
        proxy_set_header X-Forwarded-For $remote_addr;
        # X-Forwarded-Protoヘッダにリクエストのプロトコルを渡す
        proxy_set_header X-Forwarded-Proto $scheme;
        # X-Forwarded-Hostヘッダにリクエストのホスト名を渡す
        proxy_set_header Host $http_host;
        # Location, Refreshヘッダを書き換えてレスポンスを返さない
        proxy_redirect off;
        # リクエストをapp_serverに転送
        proxy_pass http://app_server;

        ## Client -> LB -> nginx -> app server という構成なら
        ## real_ip_header X-Forwarded-For; # remote_addrとしてX-Forwarded-Forヘッダの最後のIPを設定する
        ## real_ip_recursive on; # X-Forwarded-Forヘッダに複数のIPアドレスが存在する場合, set_real_ip_fromに載っていないアドレスをremote_addrとして扱う
        ## set_real_ip_from 10.10.0.0/16; # ローカルIP10.10.0.0/1以外のIPからremote_addrを選ぶ
        ## proxy_set_header Host $http_host;
        ## proxy_set_header X-Real-IP $remote_addr; # x-real-ipにクライアントIPを設定
        ## proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # X-Forwarded-Forヘッダに直前のIPアドレスを追加
    }

    # # 500系のエラーが発生したときに表示するエラーページのパス
    # error_page 500 502 503 504 /500.html;
    # location = /500.html {
    #     root /path/to/app/current/public;
    # }
}